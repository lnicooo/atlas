package HermesSR;

import java.awt.event.*;
import javax.swing.*;
import AtlasPackage.*;

/**
 * This class creates the HermesSR GUI allowing select the HermesSR NoC parameters and generate it.
 * @author Aline Vieira de Mello
 * @version
 */
public class HermesSRInterface extends NoCGenerationGUI implements ActionListener{
	private Project project;
	private NoC noc;

	/**
	 * Constructor class.
	 * @param project The project where the NoC will be generated.
	 */
	public HermesSRInterface(Project project){
		super("Hermes-SR   "+project.getStringProjFile());
		this.project = project;
		this.noc = project.getNoC();
		addComponents();
		super.setVisible(true);
	}

	/**
	 * add components in the Maia GUI.
	 */
	private void addComponents(){
		int x=10;
		int y=2;
		int dimx=160;
		int dimy=56;
		//Menu Bar with Help
		addMenu(this);
		//GAPH Icon
		addGaphIcon(690,y,90,27);
		//Flow control
		y=y+20;
		String[] availableFlowControl = {"CreditBased"};
		addFlowControl(x, y, dimx, dimy, availableFlowControl, noc.getFlowControl(), this);
		//Number of Virtual channels
		y=y+63;
		String[] availableVirtualChannel = {"1", "4-Ctrl(1),GS(2),BE(1)"};
		String selectedVC = "1";
		if(noc.getVirtualChannel()!=1)
			selectedVC = "4-Ctrl(1),GS(2),BE(1)";
		addVirtualChannel(x, y, dimx, dimy, availableVirtualChannel, selectedVC, this);
		//Scheduling algorithm
		y=y+63;
		String[] availableScheduling = {"Age based"};
		addScheduling(x, y, dimx, dimy, availableScheduling, noc.getScheduling(), this);
		//NoC dimensionsh
		y=y+63;
		String[] dimension = { "2", "3", "4", "5", "6", "7", "8", "9", "10", "11","12", "13", "14", "15", "16"};
		addDimensions(x, y, dimx, dimy, dimension, ""+noc.getNumRotX(), ""+noc.getNumRotY(), this);
		//Flit width
		y=y+63;
		String[] availableFlitWidth = { "16" };
		addFlitWidth(x, y, dimx, dimy, availableFlitWidth, ""+noc.getFlitSize(), this);
		//Buffer depth
		y=y+63;
		String[] availableDepth = { "4", "8", "16", "32" };
		addBuffer(x, y, dimx, dimy, availableDepth, ""+noc.getBufferDepth());
		//routing algorithm
		y=y+63;
		String[] availableAlgorithm = {"XY","Define later"};
		String selectedAlgorithm = "XY";
		if(noc.getRoutingAlgorithm().equalsIgnoreCase("Later"))
			selectedAlgorithm = "Define later";
		addRoutingAlgorithm(x, y, dimx, dimy, availableAlgorithm, selectedAlgorithm);
		//SC test bench
		y=y+63;
//		addSCTestBench(x, y, dimx, 51, noc.isSCTB(), this);
		//Generate button
		y=y+84;
		addGenerateButton(x, y, dimx, 40, this);
		//Panel with NoC topology
		addNoCPanel(180, 30, 600, 557, noc.getType());
		
		//Fixed parameters
		getFlowControl().setEnabled(false);
		getScheduling().setEnabled(false);
		getFlitWidth().setEnabled(false);
	}

	/**
	 * Update the project with the NoC parameters.
	 */
	private void updateProject(){
		noc.setFlowControl(getFlowControlSelected());
		noc.setNumRotX(getDimXSelected());
		noc.setNumRotY(getDimYSelected());
		if(getVirtualChannelSelected().equalsIgnoreCase("1")){
			noc.setVirtualChannel(1);
		}
		else{
			noc.setVirtualChannel(4);
		}
		noc.setScheduling(getSchedulingSelected());
		noc.setFlitSize(Integer.valueOf(getFlitWidthSelected()).intValue());
		noc.setBufferDepth(Integer.valueOf(getBufferDepthSelected()).intValue());
		noc.setAlgorithm(this.getRoutingAlgorithmSelected());
//		noc.setSCTB(hasSCTestBench());
		project.setNoCGenerate(true);
		project.setTrafficGenerate(false);
		noc.setCyclesPerFlit(1);
		noc.setCyclesToRoute(3);
		//write the project file.
		project.write();
	}

	/**
	 * Generate the NoC with the selected parameters.
	 */
	private void generate(){
		updateProject();
		if(noc.getVirtualChannel()==1){
			HermesSRCreditBased cb = new HermesSRCreditBased(project);
			cb.generate();
		}
		else{
			CV4_ctrl_gs_be cb = new CV4_ctrl_gs_be(project);
			cb.generate();
		}
		super.dispose();
	}

	/**
	 * Return the routing algorithm selected.
	 * @return The routing algorithm selected in the GUI.
	 */
	public String getRoutingAlgorithmSelected(){
		String algorithm = (String)getRoutingAlgorithm().getSelectedItem();
		if(algorithm.equalsIgnoreCase("XY"))
			return "AlgorithmXY";
		else if(algorithm.equalsIgnoreCase("Define later"))
			return "Later";
		return "AlgorithmXY";
	}

	public void actionPerformed(ActionEvent e){
		if(e.getSource()==getDimX() || e.getSource()==getDimY() || e.getSource()==getFlitWidth()){
			verifyDimension(this);
		}
		else if(e.getSource()==getGenerateButton()){
			if(project.isNoCGenerate()){
				int option = JOptionPane.showConfirmDialog(null,"This option clean throughout the project, removing all files generated by the Traffic Generation and Traffic Evaluation. Do you want to do this?","Question Message", JOptionPane.OK_CANCEL_OPTION);
				if(option == JOptionPane.OK_OPTION){
					project.delete();
					generate();
				}
			}
			else
				generate();
		}
		else if(e.getActionCommand().equalsIgnoreCase("Documentation"))
		    Help.show("https://corfu.pucrs.br/redmine/projects/atlas/wiki/");
		else if(e.getActionCommand().equalsIgnoreCase("About Hermes-SR"))
			JOptionPane.showMessageDialog(this,"Hermes-SR          23.10.2007\nDeveloped by:\n\t        Edson Ifarraguirre Moreno","VERSION 1.0",JOptionPane.INFORMATION_MESSAGE);
	}
}